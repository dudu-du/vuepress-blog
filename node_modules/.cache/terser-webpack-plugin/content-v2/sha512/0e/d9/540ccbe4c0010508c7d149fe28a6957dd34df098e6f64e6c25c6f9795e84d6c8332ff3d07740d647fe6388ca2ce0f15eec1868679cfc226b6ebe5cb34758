{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{423:function(t,e,a){\"use strict\";a.r(e);var n=a(62),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h2\",{attrs:{id:\"_1-ioc容器源码解析\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-ioc容器源码解析\"}},[t._v(\"#\")]),t._v(\" 1. IOC容器源码解析\")]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/spring/image-20220425080658717.png\",alt:\"image-20220425080658717\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-1-beandefinition\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-beandefinition\"}},[t._v(\"#\")]),t._v(\" 1.1 BeanDefinition\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"https://cloud.tencent.com/developer/article/1497805\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"Bean是Spring的一等公民\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"可以把BeanDefinition类比为Java中的Class，Java中用Class描述Java类并制作对象实例，而在Spring中，通过BeanDefinition来描述并制作Bean\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"在BeanDefinition中，包含了有别于Java对象的额外属性，如下👇\")])])]),t._v(\" \"),a(\"table\",[a(\"thead\",[a(\"tr\",[a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"额外属性\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"XML方式\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"注解方式\")]),t._v(\" \"),a(\"th\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"描述\")])])]),t._v(\" \"),a(\"tbody\",[a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"作用范围\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"scope\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"@Scope\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"singleton、prototype、request、session、globalsession\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"懒加载\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"lazy-init\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"@Lazy\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"第一次使用的时候才会创建出bean的实例\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"首选\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"primary\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"@Primary\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"设置为true的bean会是优先的实现类\")])]),t._v(\" \"),a(\"tr\",[a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"工厂Bean\"),a(\"br\"),t._v(\"工厂方法\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"factory-bean\"),a(\"br\"),t._v(\"factory-method\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"@Configuration\"),a(\"br\"),t._v(\"@Bean\")]),t._v(\" \"),a(\"td\",{staticStyle:{\"text-align\":\"center\"}},[t._v(\"如下图，\")])])])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/spring/image-20220425075431872.png\",alt:\"image-20220425075431872\"}})]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"40%\"},attrs:{src:\"/assets/img/spring/image-20220425080738344.png\",alt:\"image-20220425080738344\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AttributeAccessor\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"定义了最基本的对任意对象元数据的修改或者获取方式\")]),t._v(\" \"),a(\"li\",[t._v(\"BeanDefinition继承了他，用于获取BeanDefinition的属性，并对这些属性进行操作\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"BeamMetadataElement\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"提供了一个\"),a(\"code\",[t._v(\"getResource()\")]),t._v(\"方法\")]),t._v(\" \"),a(\"li\",[t._v(\"用来传输一个可以配置的源对象，对于BeanDefinition来说，用来返回它的Class对象？？？\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AttributeAccessorSupport\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"AttributeAccessor的简单实现\")]),t._v(\" \"),a(\"li\",[t._v(\"定义了一个LinkedHashMap，用于存储某个对象的元数据\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AbstractBeanDefinition\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"经验：在编写代码过程中，如果涉及到多个实现子类，并且多个实现子类之间有许多通用部分，可以将这些通用部分放到一个抽象类中\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"BeanDefinition实现类的基类\")]),t._v(\" \"),a(\"li\",[t._v(\"定义了一个通用的构造函数\"),a(\"code\",[t._v(\"AbstractBeanDefinition(BeanDefinition original)\")]),t._v(\"，为指定的BeanDefinition做深度拷贝【定义了一些通用的属性和getter、setter方法，方便赋值】，factoryBean和factoryMethod也在这里设置\")]),t._v(\" \"),a(\"li\",[t._v(\"公共的工具方法\\n\"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"overrideFrom(BeanDefinition other)\")]),t._v(\"：用别的BeanDefinition的属性全量覆盖当前BeanDefinition\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"applyDefaults(BeanDefinitionDefaults defaults)\")]),t._v(\"：为当前BeanDefinition设置初始值\")])])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"RootBeanDefinition\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"BeanDefinition之间的继承关系是通过设置pairentName属性来决定的\")]),t._v(\" \"),a(\"li\",[t._v(\"可以单独作为BeanDefinition，也可以作为其他BeanDefinition的父类，但是不能作为其他BeanDefinition的子类，如果为他设置parentName，会抛出异常\")]),t._v(\" \"),a(\"li\",[t._v(\"RootBeanDefinition用来在运行时接收多个BeanDefinition合并起来的信息\")]),t._v(\" \"),a(\"li\",[t._v(\"配置文件里的Bean标签会被解析成RootBeanDefinition，Spring2.5之后使用了GenericBeanDefinition取代了RootBeanDefinition和ChildBeanDefinition\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ChildBeanDefinition\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"不可以单独存在，必须依赖一个父BeanDefinition，已经完全被GenericBeanDefinition取代了\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"GenericBeanDefinition\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Spring2.5之后，新加入的Bean文件配置属性定义类，是ChildBeanDefinition和RootBeanDefinition更好的替代方案\")]),t._v(\" \"),a(\"li\",[t._v(\"在AbstractBeanDefinition基础上增加了parentName属性，其他基本没变\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-2-beanfactory【简单容器】\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-beanfactory【简单容器】\"}},[t._v(\"#\")]),t._v(\" 1.2 BeanFactory【简单容器】\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"BeanFactory是SpringIOC容器的根接口，定义了bean工厂最基础的功能特性\")]),t._v(\" \"),a(\"p\",[t._v(\"Bean都是由它的实现类来管理的\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"主要方法\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"getBean(String name)\")]),t._v(\" \"),a(\"li\",[t._v(\"getBean(Class type)\")]),t._v(\" \"),a(\"li\",[t._v(\"isSingleton(String name)\")]),t._v(\" \"),a(\"li\",[t._v(\"isPrototype(String name)\")]),t._v(\" \"),a(\"li\",[t._v(\"getType(String name)\")]),t._v(\" \"),a(\"li\",[t._v(\"getAliases(String name)\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"在\"),a(\"code\",[t._v(\"BeanFactory\")]),t._v(\"接口中定义了一个变量\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 用来获取FactoryBean的实例\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"String\")]),t._v(\" FACTORY_BEAN_PREFIX \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"&\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"FactoryBean\")]),t._v(\"接口\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"getObject()\")]),t._v(\" - 用户可以通过一套复杂的逻辑来生成bean\")]),t._v(\" \"),a(\"li\",[t._v(\"本质也是一个bean，用来生成普通的bean\")]),t._v(\" \"),a(\"li\",[t._v(\"容器初始化的时候，会把实现了这个接口的bean取出来，使用bean里面的getObject()方法来生成我们想要的bean\")])]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"UserFactoryBean\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"implements\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"FactoryBean\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObject\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"throws\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Exception\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Override\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Class\")]),a(\"span\",{pre:!0,attrs:{class:\"token generics\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"?\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\">\")])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getObjectType\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])]),a(\"div\",{staticClass:\"language-xml extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),t._v(\"bean\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"id\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"userFactoryBean\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"class\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation attr-equals\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.zhaoxuan.entity.factory.UserFactoryBean\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\")])])]),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),t._v(\" user \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"User\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" context\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getBean\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"userFactoryBean\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// com.zhaoxuan.entity.User@239963d8\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回的是User实例\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"user\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"UserFactoryBean\")]),t._v(\" userFactoryBean \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"UserFactoryBean\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" context\\n        \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getBean\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"BeanFactory\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"FACTORY_BEAN_PREFIX \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"+\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"userFactoryBean\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// com.zhaoxuan.entity.factory.UserFactoryBean@3abbfa04\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// 返回的是factoryBean实例\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"System\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"out\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"println\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"userFactoryBean\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])]),a(\"img\",{staticStyle:{zoom:\"40%\"},attrs:{src:\"/assets/img/spring/image-20220425182311945.png\",alt:\"image-20220425182311945\"}})]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"单一职责，每个较顶层接口都是单一职责的，只提供某一方面的功能\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ListableBeanFactory\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"以列表的形式提供bean的相关信息\")]),t._v(\" \"),a(\"li\",[t._v(\"最大的特点就是批量列出工厂生产的实例的信息【getBeanDefinitionNames()】\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"HierarchicalBeanFactory\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"允许BeanFactory进行分层\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"getParentBeanFactory() - 如果有父工厂，则返回\")]),t._v(\" \"),a(\"li\",[t._v(\"containsLocalBean(String name) - 本层是否包含某个bean，不会在父工厂查找\")]),t._v(\" \"),a(\"li\",[t._v(\"实现了该接口的容器，可以在应用中启动多个BeanFactory，将各个BeanFactory设置为父子关系，这样能很好适配三层架构了，比如容器A管理Controller层的bean，容器B管理Service层的bean......\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AutowireCapableBeanFactory\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"给容器赋予了自动装配bean的能力，根据BeanDefinition去装配bean，执行前后处理器\")]),t._v(\" \"),a(\"li\",[t._v(\"集成其他框架的时候，该接口的实现类例如\"),a(\"code\",[t._v(\"AbstractAutowireCapableBeanFactory\")]),t._v(\"，通过他的autowireBean方法里面的populateBean方法去把其他框架的实例注册到IOC容器中\")]),t._v(\" \"),a(\"li\",[t._v(\"@Autowired的处理逻辑最终调用了\"),a(\"code\",[t._v(\"AutowireCapableBeanFactory\")]),t._v(\"的\"),a(\"code\",[t._v(\"resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName)\")]),t._v(\"实现的依赖注入\")]),t._v(\" \"),a(\"li\",[t._v(\"5种装配策略\\n\"),a(\"ul\",[a(\"li\",[t._v(\"0 - 没有自动装配\")]),t._v(\" \"),a(\"li\",[t._v(\"1 - 根据名称\")]),t._v(\" \"),a(\"li\",[t._v(\"2 - 根据类型 - @Autowired使用\")]),t._v(\" \"),a(\"li\",[t._v(\"3 - 根据构造函数\")]),t._v(\" \"),a(\"li\",[t._v(\"4 - Spring3.0废弃\")])])]),t._v(\" \"),a(\"li\",[t._v(\"还定义了一些跟自动装配相关的方法以及执行BeanPostProcessor的方法\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ConfigurableBeanFactory\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"设置父容器、类加载器、属性编辑器、容器通用的后置处理器等方法\")]),t._v(\" \"),a(\"li\",[t._v(\"继承了\"),a(\"code\",[t._v(\"SingletonBeanRegistry\")]),t._v(\"，提供了在运行期间向容器注册单例实例bean的能力\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ConfigurableListableBeanFactory\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"整合了BeanFactory体系的所有二级接口，包含了BeanFactory体系的所有方法\")]),t._v(\" \"),a(\"li\",[t._v(\"加入了诸如忽略自动装配等10个方法\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"DefaultListableBeanFactory\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"第一个真正可以独立运行的IOC容器\")]),t._v(\" \"),a(\"li\",[t._v(\"实现了BeanDefinitionRegistry接口\")]),t._v(\" \"),a(\"li\",[t._v(\"最关键的成员变量beanDefinitionMap，Spring中有两个地方定义了beanDefinitionMap，另外一个是\"),a(\"code\",[t._v(\"SimpleBeanDefinitionRegistry\")]),t._v(\"，只提供注册表功能，并无工厂功能\")]),t._v(\" \"),a(\"li\",[t._v(\"ApplicationContext最终实现子类里，由于对BeanDefinition进行注册是一项必须具备的需求，所以他们会以组合的方式去调用DefaultListableBeanFactory提供的registerBeanDefinition方法对BeanDefinition进行注册\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-3-applicationcontext【高级容器】\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-applicationcontext【高级容器】\"}},[t._v(\"#\")]),t._v(\" 1.3 ApplicationContext【高级容器】\")]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425182433330.png\",alt:\"image-20220425182433330\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ApplicationContext\")])]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"EnvironmentCapable、ListableBeanFactory、HierarchicalBeanFactory、MessageSource、ApplicationEventPublisher、ResourcePatternResolver\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"传统基于XML配置的经典容器\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"FileSystemXmlApplicationContext\")])]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"ClassPathXmlApplication\")])]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"XmlWebApplicationContext\")]),t._v(\" - 用于web应用程序的容器\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"目前比较流行的\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"code\",[t._v(\"AnnotationConfigServletWebServerApplicationContext\")]),t._v(\" - 在springboot的boot模块下\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"AnnotationConfigReactiveWebServerApplicationContext\")]),t._v(\" - 在springboot的boot模块下\")]),t._v(\" \"),a(\"li\",[a(\"code\",[t._v(\"AnnotationConfigApplicationContext\")])])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"上述容器的共同点 ----- refresh()方法\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ConfigurableApplicationContext\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"继承\"),a(\"code\",[t._v(\"LifeCycle\")]),t._v(\"、\"),a(\"code\",[t._v(\"Closeable\")]),t._v(\"用于对容器的生命周期管理和资源的释放\")]),t._v(\" \"),a(\"li\",[t._v(\"主要两个方法refresh和close，让ApplicationContext具备启动刷新、关闭应用上下文的能力\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AbstractApplicationContext\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"Spring高级容器中最重要的类\")]),t._v(\" \"),a(\"li\",[t._v(\"继承了DefaultResourceLoader\")]),t._v(\" \"),a(\"li\",[t._v(\"事件发送广播、监听器注册、getBean方法实现、refresh\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-4-resource、resourceloader\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-resource、resourceloader\"}},[t._v(\"#\")]),t._v(\" 1.4. Resource、ResourceLoader\")]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425201249587.png\",alt:\"image-20220425201249587\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"EncodedResource\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"实现对资源文件的编码处理\")]),t._v(\" \"),a(\"li\",[t._v(\"getReader\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AbstractResource\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ServletContextResource\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"ClassPathResource\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"利用相对路径的方式访问WEB-INF/classes类路径下的资源\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"FileSystemResource\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Spring提供了强大的加载资源方式\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"自动识别“classpath:”、“file:”等资源地址前缀\")]),t._v(\" \"),a(\"li\",[t._v(\"支持自动解析Ant风格带通配符的资源地址\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Ant\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"路径匹配表达式，用来对uri进行匹配\")]),t._v(\" \"),a(\"li\",[t._v(\"? - 任何单个字符\")]),t._v(\" \"),a(\"li\",[t._v('\"*\" - 0或者任意数量字符或者目录')]),t._v(\" \"),a(\"li\",[t._v('\"**\" - 0或者任意数量目录')])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"Spring根据传入的地址，自动构建出适配于该资源的Resource实现类实例，用的是ResourceLoader\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"看起来像是简单工厂模式，其实是策略模式\")]),t._v(\" \"),a(\"p\",[t._v(\"简单工厂强调的是获取创建出来的对象，用户并不了解对象的本身\")]),t._v(\" \"),a(\"p\",[t._v(\"策略模式要求用户了解策略，即针对什么样的资源需要用到哪种Resource来加载\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"getClassLoader\")])])])]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425203123589.png\",alt:\"image-20220425203123589\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"DefaultResourceLoader\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"getResource\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v('ResourceLoader并不支持Ant风格的路径解析，Spring提供了ResourcePatternResolver接口，加入了getResources方法，返回多个Resource实例，新增了一种协议前缀“classpath*:\"')]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"PathMatchingResourcePatternResolver提供了ResourcePatternResolver实现，该类组合了ResourceLoader，也就是说对于继承自ResourceLoader的方法的实现会代理给该引用\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"ApplicationContext继承了ResourcePatternResolver接口，所以任何的ApplicationContext的实现都可以看做是一个ResourceLoader或者ResourcePatternResolver的实例\")])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"AbstractApplicationContext继承了DefaultResourceLoader，其内部有个getResourcePatternResolver()方法，返回了PathMathingResourcePatternResolver的实例，将自己作为ResourceLoader传入，该方法在AbstractApplicationContext的构造函数中引用\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"protected\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"ResourcePatternResolver\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getResourcePatternResolver\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"PathMatchingResourcePatternResolver\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"// AbstractApplicationContext构造函数\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"AbstractApplicationContext\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\t\\t\"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"this\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"resourcePatternResolver \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getResourcePatternResolver\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-5-beandefinitionreader\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-beandefinitionreader\"}},[t._v(\"#\")]),t._v(\" 1.5 BeanDefinitionReader\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"BeanDefinitionReader利用ResourceLoader或者ResourcePatternResolver将配置信息解析成一个一个的BeanDefinition\")]),t._v(\" \"),a(\"p\",[t._v(\"最终借助BeanDefinitionRegistry将BeanDefinition注册到容器中\")])]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425213903721.png\",alt:\"image-20220425213903721\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"getRegistry() - 将BeanDefinition注册到BeanDefinition的注册表中【beanDefinitionMap】\")]),t._v(\" \"),a(\"li\",[t._v(\"getBeanNameGenerator() - Bean名字生成器，为匿名bean生成一个name\")])]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425214110111.png\",alt:\"image-20220425214110111\"}}),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"AbstractBeanDefinitionReader\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"loadBeanDefinitions()方法根据用户提供的ResourceLoader类型，判断加载一个还是多个资源\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[a(\"code\",[t._v(\"XmlBeanDefinitionReader\")])])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-6-beandefinitionregistry\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-6-beandefinitionregistry\"}},[t._v(\"#\")]),t._v(\" 1.6 BeanDefinitionRegistry\")]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220425222146387.png\",alt:\"image-20220425222146387\"}}),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-7-beandefinition注册流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-7-beandefinition注册流程\"}},[t._v(\"#\")]),t._v(\" 1.7 BeanDefinition注册流程\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"p\",[t._v(\"alreadyCreated - 一个名字列表，保存了至少创建过一次的bean的名字集合，如果这个集合不为空，走下面逻辑\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"锁住beanDefinitionMap\")]),t._v(\" \"),a(\"li\",[t._v(\"将新增的BeanDefinition放进beanDefinitionMap\")]),t._v(\" \"),a(\"li\",[t._v(\"新建一个list，将之前所有BeanDefinition的name加进去\")]),t._v(\" \"),a(\"li\",[t._v(\"将新增的BeanDefinition的名字加入这个list\")]),t._v(\" \"),a(\"li\",[t._v(\"用这个list覆盖之前的beanDefinitionNames\")]),t._v(\" \"),a(\"li\",[t._v(\"【所以，BeanDefinitionNames是按照注册保存进去的】\")]),t._v(\" \"),a(\"li\",[t._v(\"对已经注册的单例bean的名字列表【manualSingletonNames】进行更新，如果要新增的BeanDefinition的名字在这个列表里就删掉\")])])]),t._v(\" \"),a(\"li\",[a(\"p\",[t._v(\"alreadyCreated为空，说明容器是新创建的，大胆注册，从manualSingletonNames中删除这个名字\")]),t._v(\" \"),a(\"p\",[t._v(\"。。。。。。。好乱！！！！！！\")])])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_1-8-xml配置文件加载beandefinition流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-8-xml配置文件加载beandefinition流程\"}},[t._v(\"#\")]),t._v(\" 1.8 xml配置文件加载BeanDefinition流程\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"BeanDefinitionReader将DefaultListableBeanFactory【BeanDefinitionRegistry】和FileSystemXmlApplicationContext【ResourceLoader】串联到一起\")]),t._v(\" \"),a(\"p\",[t._v(\"所以，BeanDefinitionReader的子类实现，组合了ResourceLoader\")])]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220426145447103.png\",alt:\"image-20220426145447103\"}}),t._v(\" \"),a(\"div\",{staticClass:\"language-mermaid extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-mermaid\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"sequenceDiagram\")]),t._v(\"\\n\\tFileSystemXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用父类构造方法，创建默认<br/>ResourceLoader【PathMatchingResourcePatternResolver】\\n\\tFileSystemXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractRefreshableConfigApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 设置资源路径【configLocations】\\n\\tFileSystemXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用refresh\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"方法\\n\\tAbstractApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用obtainFreshBeanFactory\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"方法\\nAbstractApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractRefreshableApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用子类refreshBeanFactory（）方法\\nAbstractRefreshableApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractRefreshableApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 创建DefaultListableBeanFactory\\nAbstractRefreshableApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractXmlApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用loadBeanDefinitions\"),a(\"span\",{pre:!0,attrs:{class:\"token text string\"}},[t._v(\"(beanFactory)\")]),t._v(\"\\nAbstractXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractXmlApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 创建XmlBeanDefinitionReader<br/>【将beanFactory当做BeanDefinitionRegistry传给XmlBeanDefinitionReader】\\nAbstractXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractXmlApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 为beanDefinitionReader设置ResourceLoader<br/>【参数为this，也就是FileSystemXmlApplicationContext】\\nAbstractXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" AbstractXmlApplicationContext\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用loadBeanDefinitions\"),a(\"span\",{pre:!0,attrs:{class:\"token text string\"}},[t._v(\"(beanDefinitionReader)\")]),t._v(\"方法\\nAbstractXmlApplicationContext \"),a(\"span\",{pre:!0,attrs:{class:\"token arrow operator\"}},[t._v(\"->>\")]),t._v(\" XmlBeanDefinitionReader\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\" 调用reader的loadBeanDefinitions\"),a(\"span\",{pre:!0,attrs:{class:\"token text string\"}},[t._v(\"(configLocations)\")]),t._v(\"方法<br/>至此，进入BeanDefinitionReader的流程 \\n\")])])]),a(\"h3\",{attrs:{id:\"_1-9-注解配置加载beandefinition流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-9-注解配置加载beandefinition流程\"}},[t._v(\"#\")]),t._v(\" 1.9 注解配置加载BeanDefinition流程\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"DefaultListableBeanFactory在调用容器构造函数的时候生成的，而在xml中，是在refresh方法中的obtainFreshBeanFactory()方法中创建的，提前创建的原因是需要提前创建出一些系统内置的BeanDefinition实例\")]),t._v(\" \"),a(\"li\",[t._v(\"构造函数中直接创建AnnotatedBeanDefinitionReader，并将自己作为BeanDefinitionRegistry传入，需要注意的是，AnnotationConfigApplicationContext继承了GenericApplicationContext，GenericApplicationContext又实现了BeanDefinitionRegistry接口，但是真正注册BeanDefinition的是GenericApplicationContext中的成员变量DefaultListableBeanFactory\")]),t._v(\" \"),a(\"li\",[t._v(\"AnnotatedBeanDefinitionReader并不属于BeanDefinitionReader的体系，而是专门负责注解相关的BeanDefinition的注入\")]),t._v(\" \"),a(\"li\",[t._v(\"入口类的Bean注册和普通Bean注册的流程不一样，入口类与系统内置的Bean一样，在构造方法中就已经生成了，而普通bean，是在refresh()方法中的invokeBeanFactoryPostProcessors(beanFactory)方法中执行的\")])]),t._v(\" \"),a(\"p\",[t._v(\"待补充。。。。。。\")]),t._v(\" \"),a(\"h2\",{attrs:{id:\"_2-refresh-方法\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-refresh-方法\"}},[t._v(\"#\")]),t._v(\" 2. Refresh()方法\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-1-postprocessor\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-postprocessor\"}},[t._v(\"#\")]),t._v(\" 2.1 PostProcessor\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"也是注册到Spring里的bean\")]),t._v(\" \"),a(\"p\",[t._v(\"里面的方法会在特定时机被调用\")]),t._v(\" \"),a(\"p\",[t._v(\"实现不改变容器或者Bean核心逻辑的情况下对Bean进行扩展\")])]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"BeanDefinitionRegistryPostProcessor\")]),t._v(\" \"),a(\"li\",[t._v(\"BeanFactoryPostProcessor\")]),t._v(\" \"),a(\"li\",[t._v(\"BeanPostProcessor\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-2-aware接口\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-aware接口\"}},[t._v(\"#\")]),t._v(\" 2.2 Aware接口\")]),t._v(\" \"),a(\"blockquote\",[a(\"p\",[t._v(\"从bean里获取到的容器实例并对其进行操作\")])]),t._v(\" \"),a(\"p\",[a(\"img\",{attrs:{src:\"/assets/img/spring/image-20220426170847965.png\",alt:\"image-20220426170847965\"}})]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-3-事件监听器模式\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-3-事件监听器模式\"}},[t._v(\"#\")]),t._v(\" 2.3 事件监听器模式\")]),t._v(\" \"),a(\"img\",{staticStyle:{zoom:\"50%\"},attrs:{src:\"/assets/img/spring/image-20220426173005122.png\",alt:\"image-20220426173005122\"}}),t._v(\" \"),a(\"p\",[a(\"strong\",[t._v(\"事件驱动模型的三大组成部分\")])]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"事件：ApplicationEvent\\n\"),a(\"ol\",[a(\"li\",[t._v(\"PayloadApplicationEvent<T> - 在容器内不发布任意事件的时候，容器都会自动包装成PayloadApplicationEvent类型\")])])]),t._v(\" \"),a(\"li\",[t._v(\"事件监听器：ApplicationListener\\n1.\")]),t._v(\" \"),a(\"li\",[t._v(\"事件发布器：ApplicationEventPublisher、ApplicationEventMulticaster\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"_2-4-refresh-方法流程\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-4-refresh-方法流程\"}},[t._v(\"#\")]),t._v(\" 2.4 refresh()方法流程\")]),t._v(\" \"),a(\"h4\",{attrs:{id:\"_2-4-1\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-4-1\"}},[t._v(\"#\")]),t._v(\" 2.4.1\")]),t._v(\" \"),a(\"p\",[t._v(\"jvm\")]),t._v(\" \"),a(\"p\",[t._v(\"thread\")])])}),[],!1,null,null,null);e.default=s.exports}}]);","extractedComments":[]}